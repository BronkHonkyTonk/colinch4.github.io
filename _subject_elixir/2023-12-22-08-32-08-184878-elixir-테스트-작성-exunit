Elixir에서 테스트 작성하기
Elixir의 테스트 라이브러리: ExUnit
ExUnit을 사용한 단위 테스트 작성
ExUnit을 사용한 통합 테스트 작성
ExUnit을 사용한 모의(mock) 테스트 작성
테스트 주도 개발(TDD) 방법으로 ExUnit 테스트 작성
ExUnit에서의 어설션(assertion) 사용하기
ExUnit 테스트 결과 보고서 작성하기
Elixir 코드 커버리지(coverage) 테스트 작성하기
ExUnit 프레임워크를 사용하여 Elixir 애플리케이션 테스트 작성하기
테스트 더블(test double)을 활용한 효과적인 테스트 작성하기
ExUnit 테스트의 모듈 구조 및 관례
테스트 케이스 수행에 대한 ExUnit 테스트 작성
테스트 케이스 그룹화 및 테스트 스위트 테스트 작성
ExUnit을 사용하여 비동기적 코드 테스트하기
계속적 통합(CI) 환경에서의 ExUnit 테스트 작성
테스트 변경 및 리팩토링에 대한 ExUnit 테스트 작성
ExUnit에 대한 특정 테스트 실패 처리하기
ExUnit 테스트의 목적과 중요성
테스트 더블을 사용하여 외부 종속성 테스트 회피하기
테스트 주도 개발(TDD)과 ExUnit의 상호작용
통합 테스트와 단위 테스트의 차이점
ExUnit을 사용하여 테스트 데이터 관리하기
ExUnit의 테스트 진행 상황 표시하기
효과적인 테스트 주기 및 주기성 테스트 작성
테스트 우선 개발(TFD) 접근 방식과 ExUnit의 활용
ExUnit 테스트에서 예외 처리하기
테스트 데이터 생성 및 ExUnit 테스트에 활용하기
ExUnit에서의 테스트 코드 분리 및 재사용성
테스트 코드 품질과 유지보수에 대한 ExUnit 테스트 작성
테스트 주도 개발(TDD) 사이클과 ExUnit의 연계
효과적인 테스트 커버리지 확인을 위한 ExUnit 활용
ExUnit을 활용한 테스트 주도 개발(TDD) 장단점
비즈니스 로직에 대한 ExUnit 테스트 작성
테스트 자동화를 위한 ExUnit의 활용
ExUnit을 사용하여 웹 애플리케이션 테스트 작성하기
ExUnit을 활용한 테스트 주도 개발(TDD)의 효율성
무결성 및 예외 처리에 대한 ExUnit 테스트 작성
ExUnit을 사용하여 병행성 코드 테스트하기
테스트 결과 분석 및 리포팅에 대한 ExUnit
테스트 주도 개발(TDD)에 대한 ExUnit 테스트 작성
ExUnit 테스트 작성을 위한 최상의 관행
ExUnit 테스트 작성을 위한 가이드라인 및 권장사항
ExUnit 테스트 픽스쳐(fixtures) 활용
테스트 중복 제거와 리팩토링을 위한 ExUnit의 활용
ExUnit을 사용한 애플리케이션 상호작용 테스트
테스트 데이터 초기화 및 정리 작업에 대한 ExUnit
ExUnit을 사용하여 비즈니스 규칙 테스트하기
격리된 환경에서의 ExUnit 테스트 작성
ExUnit을 활용한 애플리케이션 보안 테스트