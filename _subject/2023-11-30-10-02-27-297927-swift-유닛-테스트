Swift 유닛 테스트의 개념과 목적
Swift의 XCTest 프레임워크를 사용한 유닛 테스트 작성 방법
XCTest에서 테스트 케이스 작성하기
XCTest에서 테스트 메서드 작성하기
테스트 메서드에서 Assertion을 사용하여 결과 확인하기
XCTest에서 테스트 스위트 작성하기
유닛 테스트에서 모의 객체(Mock Object) 사용하기
XCTest에서 비동기 테스트 작성하기
테스트 커버리지(coverage) 개념과 Swift에서의 활용
유닛 테스트 작성 시 주의할 점 및 권장 사항
Swift 패키지 매니저(Swift Package Manager)와의 통합 테스팅
XCTest에서 상속을 통한 테스트 코드 구조화 방법
XCTestCase와 XCUIElement를 활용한 UI 테스트 작성하기
XCTest에서 데이터베이스 테스트 작성하기
XCTest에서 네트워크 테스트 작성하기
배포 전 테스트 자동화 도구인 Fastlane과 XCTest 통합 방법
스위프트 리펙토링을 위한 유닛 테스트 작성하기
Swift 테스트 컨버전스 프레임워크(Swift Test Convergence Framework) 소개
XCTest의 테스트 이중화 환경 구성하기
유닛 테스트 결과 보고서 생성 및 분석하는 방법
Swift 유닛 테스트에서 테스트 데이터 관리하는 방법
XCTest에서 테스트 이중화(Dual Testing)를 활용한 크로스 플랫폼 테스트
Swift 유닛 테스트 하이브리드(Mixed) 테스트 작성 방법
유닛 테스트를 사용한 리팩토링과 코드 개선 사례
XCTest에서 성능 테스트 작성하기
Swift 유닛 테스트에서 테스트 대역(Stubs) 사용하기
XCTest에서 테스트 컨트롤 플로우(Flow Control) 작성하기
Swift에서 Quick과 Nimble 프레임워크를 활용한 유닛 테스트 작성하기
XCTest와 Xcode의 UI Test 탭의 차이점과 활용 방법
Swift 유닛 테스트에서 코드 커버리지 측정하는 방법
XCTest에서 테스트 실행 순서 제어하기
Swift에서 프로퍼티 기반 테스트 작성하기
XCTest에서 테스트 메서드의 테스트 코드 비중과 관리 방법
Swift 유닛 테스트에서 테스트 간 의존성 관리하기
XCTest에서 퍼블리셔(Publisher)를 활용한 비동기 테스트 작성하기
CI/CD에서 Swift 유닛 테스트 통합하기
XCTest에서 테스트 이중화(Dual Testing)를 위한 테스트 대상 설정 방법
Swift 유닛 테스트에서 테스트 전/후 설정 관리하기
XCTest에서 메모리 관리 테스트 작성하기
유닛 테스트에서 테스트 데이터 생성 및 조작하기
XCTest에서 테스트 케이스 탈퇴(test case retirement) 작성 방법
Swift 유닛 테스트에서 암호화 관련 테스트 작성하기
XCTest에서 다중 플랫폼 테스트 작성하기
Swift 유닛 테스트에서 예외 처리 관리하기
XCTest에서 파일 입출력 테스트 작성하기
유닛 테스트 위한 Swift 패키지(라이브러리) 찾는 방법
XCTest에서 테스트 리소스 관리 및 사용하기
Swift 유닛 테스트에서 테스트 메서드와 테스트 케이스 분리하기
XCTest에서 테스트와 로깅(log) 작성 방법
Swift 유닛 테스트에서 UI 테스트 통합하기