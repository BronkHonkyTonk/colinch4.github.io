싱글톤 패턴을 사용하여 애플리케이션 내에 단일 인스턴스 유지
팩토리 메서드 패턴을 사용하여 객체 생성과정을 추상화
추상 팩토리 패턴을 사용하여 관련 객체들의 생성과정을 캡슐화
빌더 패턴을 사용하여 복잡한 객체 생성 과정을 단순화
프로토타입 패턴을 사용하여 객체의 복사와 생성을 효율적으로 관리
어댑터 패턴을 사용하여 서로 다른 인터페이스를 가진 클래스들을 호환 가능하게 함
브리지 패턴을 사용하여 추상화와 구현 부분을 분리
컴포지트 패턴을 사용하여 객체들을 트리 구조로 구성하여 계층적 구조를 표현
데코레이터 패턴을 사용하여 객체에 동적으로 새로운 기능을 추가
퍼사드 패턴을 사용하여 복잡한 서브시스템을 단순화
프록시 패턴을 사용하여 접근 제어와 추가 동작을 객체에 임의로 추가
옵서버 패턴을 사용하여 객체 간의 상태 변화를 통지
커맨드 패턴을 사용하여 요청을 객체로 캡슐화하고 실행 가능하게 함
인터프리터 패턴을 사용하여 언어나 문법을 해석하고 실행
스테이트 패턴을 사용하여 객체의 상태 변경에 따른 행위 변경을 캡슐화
전략 패턴을 사용하여 다양한 알고리즘을 캡슐화하고 동적으로 선택할 수 있게 함
템플릿 메서드 패턴을 사용하여 알고리즘의 구조를 정의하고 세부 구현을 서브클래스에 위임
이터레이터 패턴을 사용하여 컬렉션을 순차적으로 접근하고 조작
컴포지트 패턴을 사용하여 객체들의 집합을 동일한 방식으로 다룰 수 있게 함
메멘토 패턴을 사용하여 객체의 상태를 저장하여 나중에 복원 가능
책임 연쇄 패턴을 사용하여 요청을 처리할 수 있는 객체의 연결 링크 구성
감시자 패턴을 사용하여 객체들 간의 의존성을 최소화하고 변경 사항을 알림