타입스크립트와 모듈화 개념 이해하기
타입스크립트에서 모듈을 사용하는 방법
테스트의 필요성과 장점 이해하기
유닛 테스트 개념과 활용법 이해하기
타입스크립트에서의 유닛 테스트 작성하기
테스트 프레임워크 선택하기 (Jest, Mocha 등)
테스트 환경 설정하기 (테스트 러너 설정, 모듈로더 설정)
모듈화된 코드의 테스트를 위한 환경 구성하기
테스트 더블 (Mock, Stub, Spy) 개념과 활용법 이해하기
모듈 간 의존성 관리하기
의존성 주입 (Dependency Injection) 개념과 활용법 이해하기
테스트 케이스 작성하기
테스트 러너 실행하기
테스트 결과 분석하기
테스트 커버리지 측정하기
통합 테스트 개념과 활용법 이해하기
타입스크립트에서의 통합 테스트 작성하기
테스트 더블을 활용한 통합 테스트 작성하기
테스트 스위트 (Test Suite) 개념 이해하기
테스트 스위트 작성과 실행하기
에러 핸들링 테스트 작성하기
비동기 테스트 작성하기 (Promise, Async/Await)
타입스크립트에서의 목업 (Mockup) 개념과 활용법 이해하기
타입스크립트에서의 스텁 (Stub) 개념과 활용법 이해하기
타입스크립트에서의 스파이 (Spy) 개념과 활용법 이해하기
코드 커버리지 측정 도구 사용하기 (Istanbul, istanbul-instrumenter-loader)
테스트 결과 리포팅 도구 사용하기 (Mocha Reporter, Istanbul Reporter)
테스트 환경과 개발 환경 분리하기
CI/CD 시스템과의 연동하기
자동화된 테스트 실행하기
테스트 더블의 제한과 적재적소 사용하기
테스트 코드의 유지보수하기
테스트 주도 개발 (TDD) 개념과 진행 방법 이해하기
타입스크립트에서의 TDD 방법론 적용하기
타입스크립트에서의 BDD (Behavior-Driven Development) 방법론 적용하기
타입스크립트에서의 E2E (End-to-End) 테스트 개념과 활용법 이해하기
E2E 테스트 프레임워크 선택하기 (Cypress, Puppeteer 등)
E2E 테스트 작성하기
E2E 테스트의 장점과 한계 이해하기
성능 테스트 개념과 활용법 이해하기
타입스크립트에서의 성능 테스트 작성하기
프로파일링 도구 사용하기 (Chrome DevTools, Node.js Profiler)
로그 분석 도구 사용하기 (ELK Stack, Splunk)
모듈화된 코드의 테스트 방법 비교하기 (유닛 테스트 vs 통합 테스트 vs E2E 테스트)
테스트 코드리뷰하기
테스트 자동화 적용하기
테스트 주기 (Test Lifecycle) 관리하기
테스트 데이터 관리하기
테스트 환경 세팅의 베스트 프랙티스 적용하기
타입스크립트 테스트 코드 작성 시 주의할 점 이해하기