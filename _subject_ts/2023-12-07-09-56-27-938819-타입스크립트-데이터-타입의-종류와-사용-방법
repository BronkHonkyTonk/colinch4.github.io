타입스크립트의 데이터 타입이란?
기본 데이터 타입 (number, string, boolean, null, undefined)
객체 형식의 데이터 타입 (object, array)
함수의 데이터 타입 (함수의 매개변수 타입, 반환 타입)
인터페이스(interface)를 통한 데이터 타입 정의
제네릭(generic)을 사용한 데이터 타입 추론 및 가변성 처리
타입 가드(type guard)를 통한 데이터 타입의 확정
유니온 타입(union type)과 인터섹션 타입(intersection type) 활용
타입 별칭(type alias)을 사용한 데이터 타입 정의
런타임에 존재하지 않는 데이터 타입(never, any)
타입 어노테이션(type annotation)과 타입 추론(type inference)
타입 단언(type assertion)을 통한 타입 변환
타입 호환성(type compatibility)과 구조적 타이핑(structural typing)
타입스크립트에서의 타입 시스템과 정적 타이핑의 장점
타입 오류(type error)와 타입 검사(type checking)
엄격한 타입 검사(strictNullChecks, noImplicitAny)
옵셔널 체이닝(optional chaining)을 사용한 타입 안정성 확보
널 병합 연산자(nullish coalescing)를 통한 기본값 설정
비구조 할당(destructuring)을 통한 타입 추출
제네릭 타입(generic type)을 사용한 재사용 가능한 코드 작성
열거형 데이터 타입(enum)의 활용
nullable 타입과 non-nullable 타입의 차이점
Readonly 타입과 Partial 타입의 활용
인덱스 시그니처(index signature)를 통한 동적 속성 추가
유니온 타입과 타입 가드를 사용한 타입 체크 방법
유형 추론을 사용하여 타입을 지정하는 방법
타입 별칭과 인터페이스의 차이점
타입 단언과 타입 가드를 사용하여 타입을 변환하는 방법
인터페이스를 사용하여 객체의 구조를 지정하는 방법
제네릭 타입을 사용하여 재사용 가능한 함수를 작성하는 방법
keyof 연산자를 사용하여 객체 속성의 이름을 추출하는 방법
never 타입을 사용하여 절대 발생하지 않는 값을 처리하는 방법
any 타입을 사용하여 동적 타입을 처리하는 방법
인터페이스 상속을 사용하여 코드를 재사용하는 방법
클래스와 인터페이스의 차이점 및 사용 방법
튜플 타입을 사용하여 고정된 길이의 배열을 다루는 방법
열거형 상수를 사용하여 정해진 값만을 허용하는 방법
타입 가드와 인터섹션 타입을 사용하여 복합 조건을 처리하는 방법
모듈 시스템을 사용하여 타입 정의를 모듈화하는 방법
함수 오버로딩을 사용하여 다양한 타입의 매개변수를 처리하는 방법
클래스를 상속하여 새로운 타입을 만드는 방법
제네릭 제약 조건을 사용하여 특정 타입에만 제네릭을 적용하는 방법
유니온 타입과 교차 타입의 차이점과 사용 방법
인터페이스 확장을 사용하여 기존 인터페이스를 확장하는 방법
제네릭 타입을 사용하여 다양한 타입에 대해 유연하게 대응하는 방법
네임스페이스를 사용하여 타입 정의를 그룹화하는 방법
다른 파일에서 정의된 타입을 불러와 사용하는 방법
타입스크립트 컴파일 옵션을 설정하여 타입 검사를 강화하는 방법
타입스크립트에서의 에러 핸들링과 예외 처리 방법
타입 추론을 이용하여 코드 작성을 더 간결하게 만드는 방법