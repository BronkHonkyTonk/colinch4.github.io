메서드 추출(refactoring): 코드 블록을 독립된 메서드로 추출하여 가독성과 재사용성을 높임
클래스 추출(refactoring): 기존의 클래스 내에서 유사한 코드를 가진 부분을 새로운 클래스로 분리하여 응집력을 강화함
필드 캡슐화(refactoring): 클래스 내의 필드를 외부로부터의 직접적인 접근이 아닌 getter와 setter 메서드를 통해 간접적인 접근을 가능하게 함
메서드 인라인(refactoring): 메서드 내에서 단순한 로직이나 호출문만 포함되어 있을 경우, 해당 코드를 호출한 곳에 직접 삽입하여 메서드의 추출을 방지함
메서드 이름 변경(refactoring): 메서드의 기능이나 동작을 명확히 나타내는 이름으로 변경하여 가독성을 향상시킴
조건문 간소화(refactoring): 복잡한 조건문을 분해하여 간소화하거나, 이를 상태 패턴과 같은 디자인 패턴을 활용하여 가독성을 높임
중복 코드 제거(refactoring): 유사한 코드가 여러 곳에서 반복되는 경우, 해당 코드를 메서드로 추출하고 공통으로 호출함으로써 중복을 제거함
상속 대신 합성 사용(refactoring): 다른 클래스를 필드로 가지는 합성 관계를 활용하여 상속 대신 합성을 사용해 유연하고 확장 가능한 설계를 구축함
파라미터 객체 사용(refactoring): 여러 개의 파라미터를 가진 메서드의 경우, 관련된 파라미터들을 하나의 객체로 묶어 가독성을 높일 수 있음
기능 이동(refactoring): 한 클래스 내에서 업무가 아닌 다른 기능을 담당하는 메서드가 있을 경우, 해당 메서드를 다른 클래스로 이동하여 역할을 분명히 함
세터 제거(refactoring): 불변성을 유지해야 하는 경우에는 클래스 내의 세터 메서드를 제거하여 불변 객체로 설계함
기본 타입을 객체로 감싸기(refactoring): 기본 자료형을 객체로 감싸서 null 처리 등의 기능을 추가하거나, 객체 단위의 메서드 호출을 가능하게 함
조건문을 다형성으로 변경(refactoring): 다양한 조건문을 팩토리 메서드 패턴 등의 다형성을 활용하여 구현하고, 코드의 유연성을 높임
미래를 위한 준비(refactoring): 요구사항이나 확장 가능성을 고려하여 코드를 리팩토링하고 구조를 개선함
오류 코드를 예외로 치환(refactoring): 오류 코드를 반환하는 대신, 예외를 던짐으로써 오류 처리 로직을 단순화하고 가독성을 높임